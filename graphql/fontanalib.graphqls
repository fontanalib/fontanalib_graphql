schema {
  query: Query
}

enum SortOrder {
  DESC
  ASC
}
enum Conjunction {
  AND
  OR
}
enum Operator {
  EQUAL
  NOT_EQUAL
  LESS_THAN
  LESS_THAN_OR_EQUAL
  GREATER_THAN
  GREATER_THAN_OR_EQUAL
  NOT_IN
  IN
  BETWEEN
  NOT_BETWEEN
  IS_NULL
  IS_NOT_NULL
  EXISTS
  NOT_EXISTS
  LIKE
  NOT_LIKE
}

scalar ArrayOrSingle

input FilterConditionInput {
  field: String!
  value: ArrayOrSingle
  operator: Operator
  enabled: Boolean = true
}
input FilterInput {
  conditions: [FilterConditionInput]
  groups: [FilterInput],
  conjunction: Conjunction = AND
}

input SortNode {
  sortBy: String!
  order: SortOrder! = ASC
}

type Query {
  nodes(
    offset: Int = 0
    limit: Int = 10
    filter: FilterInput
    sort: SortNode
  ): NodeConnection!
  terms(
    offset: Int = 0
    limit: Int = 10
    filter: FilterInput
    sort: SortNode
  ): TermConnection!
  term(
    id: Int
    ): Term
  route(path: String!): Node
}

scalar Image
scalar Images

type Term {
  id: Int!
  name: String!
  vid: String!
}

type User {
  name: String
  mail: String
  picture(size: String = "thumbnail"): Image
}

interface Node {
  id: Int!
  title: String!
  alias: String!
}

type NodeConnection {
  total: Int!
  items: [Node]
}
type TermConnection {
  total: Int!
  items: [Term]
}